"""–í–µ–±-–ø—Ä–æ–µ–∫—Ç –ê—Ä—Ç-–°—Ç—É–¥–∏—è –Æ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä—ë–≤–∞. Main File."""

import os
import os.path
import sqlite3
from config import ADMIN, SECRET_KEY
from FDataBase import FDataBase
from UserLogin import UserLogin
from flask_wtf import FlaskForm
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from flask import Flask, render_template, request, g, flash, abort, redirect, url_for, make_response
from werkzeug.datastructures import MultiDict
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEBUG = True
DATABASE = 'database.db'
UPLOAD_NEWS = r'static\images_news'  # –ø—É—Ç—å –∫ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
UPLOAD_PICTURES = r'static\images_pictures'   # –ø—É—Ç—å –∫ —Å–∫–∞–Ω–∞–º –∫–∞—Ä—Ç–∏–Ω
MAX_CONTENT_LENGTH = 10240 * 1024  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö, 10–ú–±

app = Flask(__name__)
app.config.from_object(__name__)
app.config.update(DATABASE=DATABASE)
app.config['UPLOAD_NEWS'] = UPLOAD_NEWS
app.config['UPLOAD_PICTURES'] = UPLOAD_PICTURES

login_manager = LoginManager(app)
login_manager.login_view = 'login'  # –≤—ã–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
post_id_for_news_image = {}  # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫ –Ω–æ–≤–æ—Å—Ç—è–º
pic_id_for_pic_images = {}  # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥


@login_manager.user_loader
def load_user(user_id):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–∞–≤–æ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ª—å–∫–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã–º —é–∑–µ—Ä–∞–º –∏–∑ –ë–î"""
    # print('load user')
    return UserLogin().fromDB(user_id, dbase)


def connect_db():
    """–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    conn = sqlite3.connect(app.config['DATABASE'])  # –ø—É—Ç—å –∫ –ë–î
    conn.row_factory = sqlite3.Row  # –≤—ã–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    return conn


def create_db():
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î"""
    db = connect_db()
    with app.open_resource('crt_tbls.sql', mode='r') as f:
        db.cursor().executescript(f.read())  # –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
    db.commit()
    db.close()


def get_db():
    """–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"""
    if not hasattr(g, 'link_db'):
        g.link_db = connect_db()
    return g.link_db


@app.teardown_appcontext
def close_db(error):
    """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"""
    if hasattr(g, 'link_db'):
        g.link_db.close()


dbase = None
# –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
prf_btn = '<a href="/profile"><b>[üë®üèª‚Äçüé®]</b></a>'
ext_btn = '<a href="/logout"><b>[‚Üí</b></a>'


@app.before_request
def before_request():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞"""
    global dbase
    db = get_db()
    dbase = FDataBase(db)


# ################## –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ù–æ–≤–æ—Å—Ç–∏. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ ##################


@app.route("/")
@app.route("/index")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    news = dbase.getNews()
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('indexadmin.html', news=news, prf_btn=prf_btn, ext_btn=ext_btn)
    else:
        return render_template('index.html', news=news)


@app.route("/addpost", methods=['POST', 'GET'])
@login_required
def addpost():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"""
    if request.method == 'POST':
        if len(request.form['text']) == 0:
            flash("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", "success")
            pass
        else:
            dbase.addPost(request.form['text'])
            last_id = int(dbase.lastPostId())
            return redirect(url_for('addpostimg', last_id=last_id))
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('addpost.html', prf_btn=prf_btn, ext_btn=ext_btn)


@app.route("/post_<int:last_id>/addpostimg", methods=['POST', 'GET'])
@login_required
def addpostimg(last_id):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
    post_id_for_news_image[current_user.get_id()] = last_id
    img = dbase.lastPostImg()
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('addpostimg.html', prf_btn=prf_btn, ext_btn=ext_btn, img=img)


@app.route("/post_<int:post_id>/editpost", methods=['POST', 'GET'])
@login_required
def editpost(post_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"""
    global post_id_for_news_image
    post_id_for_news_image[current_user.get_id()] = post_id
    text = dbase.getPost(post_id)['text']
    img = dbase.getPost(post_id)['img']
    if request.method == 'POST':
        dbase.editPost(request.form['text'], post_id)
        return redirect('/')
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('editpost.html', prf_btn=prf_btn, ext_btn=ext_btn,
                               text=text, img=img)


@app.route('/uploadimage', methods=['POST', 'GET'])
@login_required
def uploadimage():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏"""
    global post_id_for_news_image
    post_id = post_id_for_news_image[current_user.get_id()]  # –±–µ—Ä—ë–º id –Ω–æ–≤–æ—Å—Ç–∏ (–∏–∑ —Å–ª–æ–≤–∞—Ä—è), –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞—à—ë–ª –∞–¥–º–∏–Ω
    if request.method == 'POST':
        file = request.files['file']
        if file and dbase.verifyExt(file.filename):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try:
                ext = file.filename.rsplit('.', 1)[1]
                new_name = f'{post_id}.{ext}'
                img_path = (os.path.join(UPLOAD_NEWS, new_name))  # –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file.save(img_path)
                img_path_cut = img_path.partition('\\')[2]
                res = dbase.editPostImage(img_path_cut, post_id)
                post_id_for_news_image[current_user.get_id()] = None
                if not res:
                    pass
            except FileNotFoundError as e:
                print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + str(e))
        else:
            pass
    return redirect(request.referrer)  # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


@app.route("/post_<int:post_id>/deletepost")
@login_required
def deletepost(post_id):
    """–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"""
    image = dbase.getPost(post_id)['img']
    image_name = image.partition('/')[-1]
    image_path = (os.path.join(UPLOAD_NEWS, image_name))
    if os.path.exists(image_path):
        os.remove(image_path)
    else:
        pass
    dbase.deletePost(post_id)
    return redirect(url_for('index'))


# ################### –ö–∞—Ç–∞–ª–æ–≥ —Å –∫–∞—Ä—Ç–∏–Ω–∞–º–∏. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ ###################


@app.route("/catalog")
def catalog():
    """–ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç (–∫–∞—Ä—Ç–∏–Ω)"""
    pictures = dbase.getPictures()
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('catalogadmin.html', pictures=pictures, prf_btn=prf_btn, ext_btn=ext_btn)
    else:
        return render_template('catalog.html', pictures=pictures)


@app.route("/picplug", methods=['POST', 'GET'])
@login_required
def picplug():
    """–ó–∞–≥–ª—É—à–∫–∞, —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å —Å id –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω—ã"""
    dbase.addPic('')
    last_id = int(dbase.lastPicId())
    return redirect(url_for('addpicimg', last_id=last_id))


@app.route("/pic_<int:last_id>/addpictext", methods=['POST', 'GET'])
@login_required
def addpictext(last_id):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã (–≥–æ–¥, —Ü–µ–Ω–∞ –∏ —Ç.–¥.)"""
    if request.method == 'POST':
        last_id = int(dbase.lastPicId())
        dbase.editPic(request.form['text'], last_id)
        return redirect(url_for('catalog'))
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('addpictext.html', prf_btn=prf_btn, ext_btn=ext_btn)


@app.route("/pic_<int:last_id>/addpicimg", methods=['POST', 'GET'])
def addpicimg(last_id):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω—É"""
    pic_id_for_pic_images[current_user.get_id()] = last_id
    img = dbase.lastPicImg()
    if request.method == 'POST':
        return redirect(url_for('addpictext', last_id=last_id))
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('addpicimg.html', prf_btn=prf_btn, ext_btn=ext_btn, img=img)


@app.route('/uploadpicture', methods=['POST', 'GET'])
@login_required
def uploadpicture():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏"""
    global pic_id_for_pic_images
    pic_id = pic_id_for_pic_images[current_user.get_id()]  # –±–µ—Ä—ë–º id (–∏–∑ —Å–ª–æ–≤–∞—Ä—è), –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞—à—ë–ª –∞–¥–º–∏–Ω
    if request.method == 'POST':
        file = request.files['file']
        if file and dbase.verifyExt(file.filename):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try:
                ext = file.filename.rsplit('.', 1)[1]
                new_name = f'{pic_id}.{ext}'
                img_path = (os.path.join(UPLOAD_PICTURES, new_name))  # –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file.save(img_path)
                img_path_cut = img_path.partition('\\')[2]
                res = dbase.editPicImage(img_path_cut, pic_id)
                pic_id_for_pic_images[current_user.get_id()] = None
                if not res:
                    pass
            except FileNotFoundError as e:
                print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + str(e))
        else:
            pass
    return redirect(request.referrer)  # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


@app.route("/pic_<int:pic_id>/editpicture", methods=['POST', 'GET'])
def editpicture(pic_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É"""
    global pic_id_for_pic_images
    pic_id_for_pic_images[current_user.get_id()] = pic_id
    text = dbase.getPic(pic_id)['text']
    img = dbase.getPic(pic_id)['img']
    if request.method == 'POST':
        dbase.editPic(request.form['text'], pic_id)
        return redirect(url_for('catalog'))
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('editpicture.html', prf_btn=prf_btn, ext_btn=ext_btn,
                               text=text, img=img)


@app.route("/pic_<int:pic_id>/deletepicture")
@login_required
def deletepicture(pic_id):
    """–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É"""
    image = dbase.getPic(pic_id)['img']
    image_name = image.partition('/')[-1]
    image_path = (os.path.join(UPLOAD_PICTURES, image_name))
    if os.path.exists(image_path):
        os.remove(image_path)
    else:
        pass
    dbase.deletePic(pic_id)
    return redirect(url_for('catalog'))


@app.route("/deletepiclastid")
@login_required
def deletepiclastid():
    """–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å"""
    last_id = int(dbase.lastPicId())
    image = dbase.getPic(last_id)['img']
    image_name = image.partition('/')[-1]
    image_path = (os.path.join(UPLOAD_PICTURES, image_name))
    if os.path.exists(image_path):
        os.remove(image_path)
    else:
        pass
    dbase.deletePic(last_id)
    return redirect(url_for('catalog'))


# ################### –†–∞–∑–¥–µ–ª –æ —Å–µ–±–µ. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ####################


@app.route("/about")
def about():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ (–æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ)"""
    edit_btn = '<button class="edit-button"><a href="/editabout"><b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b></a></button>'
    description = dbase.getAbout()['description']
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('about.html', description=description,
                               prf_btn=prf_btn, ext_btn=ext_btn, edit_btn=edit_btn)
    elif current_user.is_authenticated and current_user.getName() != ADMIN:
        return render_template('about.html', description=description,
                               prf_btn=prf_btn, ext_btn=ext_btn)
    else:
        return render_template('about.html', description=description)


@app.route("/editabout", methods=['POST', 'GET'])
@login_required
def editabout():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"""
    description = dbase.getAbout()['description']
    if request.method == 'POST':
        dbase.editAbout(request.form['description'])
        return redirect('/about')
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('editabout.html', prf_btn=prf_btn, ext_btn=ext_btn,
                               description=description)


@app.route('/thephoto')
def thephoto():
    """–§–æ—Ç–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞"""
    photo_bin = dbase.getAbout()['photo']
    if not photo_bin:
        return ""
    photo = make_response(photo_bin)
    photo.headers['Content-Type'] = 'image'
    return photo


@app.route('/uploadphoto', methods=['POST', 'GET'])
@login_required
def uploadphoto():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    if request.method == 'POST':
        file = request.files['file']
        if file and dbase.verifyExt(file.filename):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            try:
                photo = file.read()
                res = dbase.editPhoto(photo)
                if not res:
                    pass
            except FileNotFoundError as e:
                print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + str(e))
        else:
            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    return redirect(url_for('about'))


# ################### –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ###################


@app.route("/contacts")
def contacts():
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    edit_btn = '<button class="edit-button"><a href="/editcontacts"' \
               'style="color: rgb(60, 60, 60);"><b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b></a></button>'
    email, phone = dbase.getContacts()
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('contacts.html', email=email, phone=phone,
                               prf_btn=prf_btn, ext_btn=ext_btn, edit_btn=edit_btn)
    elif current_user.is_authenticated and current_user.getName() != ADMIN:
        return render_template('contacts.html', email=email, phone=phone,
                               prf_btn=prf_btn, ext_btn=ext_btn)
    else:
        return render_template('contacts.html', phone=phone, email=email)


@app.route("/editcontacts", methods=['POST', 'GET'])
@login_required
def editcontacts():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    email, phone = dbase.getContacts()
    if request.method == 'POST':
        dbase.editContacts(request.form['email'], request.form['phone'])
        return redirect('/contacts')
    if current_user.is_authenticated and current_user.getName() == ADMIN:
        return render_template('editcontacts.html', prf_btn=prf_btn, ext_btn=ext_btn,
                               email=email, phone=phone)


# ################### –ü—Ä–æ—Ñ–∏–ª—å. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ###################


@app.route("/profile", methods=['POST', 'GET'])
def profile():
    """–ü—Ä–æ—Ñ–∏–ª—å"""
    user = current_user.getName()
    if request.method == 'POST':
        if request.form['pswrd1'] == request.form['pswrd2'] and \
                len(request.form['pswrd1']) + len(request.form['pswrd2']) == 0:
            flash("–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ!", "error")
        elif request.form['pswrd1'] == request.form['pswrd2']:
            pswrd = hashlib.md5(request.form['pswrd2'].encode()).hexdigest()  # —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            dbase.editPsw(current_user.get_id(), pswrd)
            flash("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
        else:
            flash("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!", "error")
    if current_user.is_authenticated:
        return render_template('profile.html', user=user, prf_btn=prf_btn, ext_btn=ext_btn)
    else:
        return render_template('profile.html')


@app.route("/login", methods=['POST', 'GET'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    form = FlaskForm()  # –ø–æ–¥–∫–ª—é—á–∏–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç csrf-–∞—Ç–∞–∫
    if current_user.is_authenticated:  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –≤–æ—à—ë–ª
        return redirect(url_for('profile'))
    if request.method == 'POST':
        user = dbase.getUserByName(request.form['name'])  # –Ω–∞—à–ª–∏ —é–∑–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –ë–î
        psw_form = request.form['psw']  # –µ—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –∏ —Ö–µ—à –ø–∞—Ä–æ–ª–µ–π —Å–æ–≤–ø–∞–ª–∏
        if user and user['psw'] == hashlib.md5(psw_form.encode()).hexdigest():
            # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ—Ç–æ–¥—É –∫–ª–∞—Å—Å–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è, —Å–æ–∑–¥–∞—ë–º —é–∑–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            userlogin = UserLogin().create(user)
            login_user(userlogin, remember=True)  # login_user - –∏–º–ø–æ—Ä—Ç –∏–∑ flask_login
            # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∑–∞–ø—Ä–∞—â–∏–≤–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ª–∏–±–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –Ω–µ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞)
            return redirect(request.args.get('next') or url_for('profile'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å!', 'error')
    return render_template("login.html", form=form)


@app.route('/logout')
@login_required
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    logout_user()  # logout_user - –∏–º–ø–æ—Ä—Ç –∏–∑ flask_login
    return redirect(url_for('login'))


if __name__ == "__main__":
    app.run(debug=DEBUG)
